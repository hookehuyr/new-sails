/**
 * 生产环境设置
 * (sails.config.*)
 *
 * 以下是配置 Sails 应用程序生产环境所需的内置设置的快速概述。
 * 此文件中的配置仅在生产环境中使用，即当您使用以下命令启动应用程序时：
 *
 * ```
 * NODE_ENV=production node app
 * ```
 *
 * > 如果您使用 git 作为版本控制解决方案，默认情况下，此文件将被提交到您的仓库中，
 * > 除非您将其添加到 .gitignore 文件中。如果您的仓库将公开可见，
 * > 请不要在此文件中添加私密/敏感数据（如 API 密钥/数据库密码）！
 *
 * 更多最佳实践和提示，请参见：
 * https://sailsjs.com/docs/concepts/deployment
 */

module.exports = {


  /**************************************************************************
  *                                                                         *
  * 告诉 Sails 在生产环境中应该使用哪个数据库。                              *
  *                                                                         *
  * (https://sailsjs.com/config/datastores)                                 *
  *                                                                         *
  **************************************************************************/
  datastores: {

    /***************************************************************************
    *                                                                          *
    * 配置您的默认生产数据库。                                                  *
    *                                                                          *
    * 1. 选择一个适配器：                                                       *
    *    https://sailsjs.com/plugins/databases                                 *
    *                                                                          *
    * 2. 将其安装为 Sails 应用程序的依赖项。                                    *
    *    (例如：npm install sails-mysql --save)                                *
    *                                                                          *
    * 3. 然后在此处设置它（`adapter`），以及连接 URL（`url`）                    *
    *    和任何其他特定于适配器的自定义设置。                                    *
    *    (参见 https://sailsjs.com/config/datastores 获取帮助。)                *
    *                                                                          *
    ***************************************************************************/
    default: {
      // adapter: 'sails-mysql',
      // url: 'mysql://user:password@host:port/database',
      //--------------------------------------------------------------------------
      //  /\   为避免将其检入版本控制，您可以选择使用
      //  ||   环境变量来设置敏感凭据，如 `url`。
      //
      //  例如：
      //  ```
      //  sails_datastores__default__url=mysql://admin:myc00lpAssw2D@db.example.com:3306/my_prod_db
      //  ```
      //--------------------------------------------------------------------------

      /****************************************************************************
      *                                                                           *
      * 更多特定于适配器的选项                                                     *
      *                                                                           *
      * > 例如，对于某些托管的 PostgreSQL 提供商（如 Heroku），                     *
      * > 必须提供带有 `rejectUnauthorized` 选项的额外 `ssl` 对象。                *
      *                                                                           *
      * 更多信息：                                                                *
      * https://sailsjs.com/config/datastores                                     *
      *                                                                           *
      ****************************************************************************/
      // ssl: { rejectUnauthorized: true },

    },

  },



  models: {

    /***************************************************************************
    *                                                                          *
    * 为了避免意外，当您的应用程序在生产模式下运行时，                           *
    * Sails 会自动将自动迁移策略设置为 "safe"。                                *
    * （这里只是一个提醒。）                                                    *
    *                                                                          *
    * 更多信息：                                                               *
    * https://sailsjs.com/docs/concepts/models-and-orm/model-settings#?migrate *
    *                                                                          *
    ***************************************************************************/
    migrate: 'safe',

    /***************************************************************************
    *                                                                          *
    * 如果在生产环境中，此应用程序可以访问物理层级联约束                         *
    *（例如 PostgreSQL 或 MySQL），则在数据库中设置这些约束，                    *
    * 并取消注释此项以禁用 Waterline 的 `cascadeOnDestroy` polyfill。           *
    *（否则，如果您使用的是像 Mongo 这样的数据库，您可能                         *
    * 选择保持此功能启用。）                                                    *
    *                                                                          *
    ***************************************************************************/
    // cascadeOnDestroy: false,

  },



  /**************************************************************************
  *                                                                         *
  * 始终禁用 "shortcut" blueprint 路由。                                     *
  *                                                                         *
  * > 如果您实际上没有使用其他 blueprint 路由，您还需要禁用它们                *
  * >（例如 "actions" 和 "rest"）-- 但您可以在 `config/blueprints.js` 中     *
  * > 进行设置，因为您会希望在所有环境中禁用它们（不仅仅是在生产环境中。）      *
  *                                                                         *
  **************************************************************************/
  blueprints: {
    shortcuts: false,
  },



  /***************************************************************************
  *                                                                          *
  * 配置生产环境的安全设置。                                                  *
  *                                                                          *
  * 重要提示：                                                               *
  * 如果 Web 浏览器将与您的应用程序通信，请确保启用了 CSRF 保护。              *
  * 为此，请在 `config/security.js` 文件中设置 `csrf: true`                    *
  *（不是在这里），这样 CSRF 应用程序也可以在开发模式下测试 CSRF 保护。         *
  *                                                                          *
  ***************************************************************************/
  security: {

    /***************************************************************************
    *                                                                          *
    * 如果此应用程序启用了 CORS（参见 `config/security.js`）并且                 *
    * `allowCredentials` 设置已启用，则您应该取消注释下面的                      *
    * `allowOrigins` 白名单。这设置了允许向您的 Sails 应用程序                   *
    * 发送跨域（CORS）请求的 "origins"。                                       *
    *                                                                          *
    * > 将 "https://example.com" 替换为您的生产服务器的 URL。                  *
    * > 确保使用正确的协议！（"http://" vs. "https://"）                       *
    *                                                                          *
    ***************************************************************************/
    cors: {
      // allowOrigins: [
      //   'https://example.com',
      // ]
    },

  },



  /***************************************************************************
  *                                                                          *
  * 配置应用程序在生产环境中如何处理会话。                                     *
  *                                                                          *
  * (https://sailsjs.com/config/session)                                     *
  *                                                                          *
  * > 如果您已禁用 "session" 钩子，则可以安全地从                             *
  * > `config/env/production.js` 文件中删除此部分。                           *
  *                                                                          *
  ***************************************************************************/
  session: {

    /***************************************************************************
    *                                                                          *
    * 生产会话存储配置。                                                        *
    *                                                                          *
    * 取消注释以下行以完成设置名为 "@sailshq/connect-redis" 的包，              *
    * 该包将使用 Redis 处理会话数据。这使您的应用程序更具可扩展性，              *
    * 允许您在多个 Sails/Node.js 服务器和/或进程的集群中共享会话。              *
    *（参见 http://bit.ly/redis-session-config 获取更多信息。）                 *
    *                                                                          *
    * > 虽然 @sailshq/connect-redis 是 Sails 应用程序的流行选择，               *
    * > 但 NPM 上还有许多其他兼容的包（如 "connect-mongo"）可用。              *
    * >（完整列表请参见 https://sailsjs.com/plugins/sessions）                  *
    *                                                                          *
    ***************************************************************************/
    // adapter: '@sailshq/connect-redis',
    // url: 'redis://user:password@localhost:6379/databasenumber',
    //--------------------------------------------------------------------------
    // /\   或者，为避免将其检入版本控制，您可以选择
    // ||   使用环境变量来设置敏感凭据。
    //
    // 例如：
    // ```
    // sails_session__url=redis://admin:myc00lpAssw2D@bigsquid.redistogo.com:9562/0
    // ```
    //
    //--------------------------------------------------------------------------

    /***************************************************************************
    *                                                                          *
    * 生产环境中会话 ID cookie 名称的配置。                                     *
    *                                                                          *
    * 我们建议使用 `__Host-` 前缀为您的会话 cookie 添加前缀，这将限制            *
    * cookie 的作用域为单个来源，以防止同站攻击。                               *
    *                                                                          *
    * 请注意，使用 `__Host-` 前缀时，除非 `sails.config.cookie.secure`          *
    * 设置为 `true`，否则不会发送会话 cookie。                                  *
    *                                                                          *
    * 阅读更多：                                                               *
    * https://sailsjs.com/config/session#?the-session-id-cookie                *
    *                                                                          *
    ***************************************************************************/
    // name: '__Host-sails.sid',

    /***************************************************************************
    *                                                                          *
    * 会话 ID cookie 的生产配置。                                               *
    *                                                                          *
    * 告诉浏览器（或其他用户代理）确保会话 ID cookie                            *
    * 始终通过 HTTPS 传输，并且在设置后 24 小时过期。                           *
    *                                                                          *
    * 注意，设置 `secure: true` 后，会话 cookie 将不会                          *
    * 通过不安全的（HTTP）连接传输。此外，对于代理后面的应用程序                 *
    *（如 Heroku），必须配置 `http` 下的 `trustProxy` 设置                      *
    * 才能使 `secure: true` 正常工作。                                         *
    *                                                                          *
    * > 虽然您可能想要增加或减少 `maxAge` 或提供                               *
    * > 其他选项，但如果应用程序通过 HTTPS 提供服务，                           *
    * > 您应该始终在生产环境中设置 `secure: true`。                             *
    *                                                                          *
    * 阅读更多：                                                               *
    * https://sailsjs.com/config/session#?the-session-id-cookie                *
    *                                                                          *
    ***************************************************************************/
    cookie: {
      // secure: true,
      maxAge: 24 * 60 * 60 * 1000,  // 24 小时
    },

  },



  /**************************************************************************
  *                                                                          *
  * 为生产环境设置 Socket.io。                                                *
  *                                                                          *
  * (https://sailsjs.com/config/sockets)                                     *
  *                                                                          *
  * > 如果您已禁用 "sockets" 钩子，则可以安全地从                             *
  * > `config/env/production.js` 文件中删除此部分。                           *
  *                                                                          *
  ***************************************************************************/
  sockets: {

    /***************************************************************************
    *                                                                          *
    * 取消注释下面的 `onlyAllowOrigins` 白名单，以配置允许                      *
    * 哪些 "origins" 可以打开到您的 Sails 应用程序的 socket 连接。             *
    *                                                                          *
    * > 将 "https://example.com" 等替换为您的应用程序的 URL。                  *
    * > 确保使用正确的协议！（"http://" vs. "https://"）                       *
    *                                                                          *
    ***************************************************************************/
    onlyAllowOrigins: [
      'http://localhost:1337',
      'http://127.0.0.1:1337'
    ],


    /***************************************************************************
    *                                                                          *
    * 如果您正在部署多个服务器和/或进程的集群，                                 *
    * 则取消注释以下行。这告诉 Socket.io 关于它可以使用的 Redis                  *
    * 服务器，以帮助它传递广播的 socket 消息。                                  *
    *                                                                          *
    * > 确保安装了兼容版本的 @sailshq/socket.io-redis！                        *
    * >（有关最新版本信息，请参见 https://sailsjs.com/config/sockets）          *
    *                                                                          *
    * (https://sailsjs.com/docs/concepts/deployment/scaling)                   *
    *                                                                          *
    ***************************************************************************/
    // adapter: '@sailshq/socket.io-redis',
    // url: 'redis://user:password@bigsquid.redistogo.com:9562/databasenumber',
    //--------------------------------------------------------------------------
    // /\   或者，为避免将其检入版本控制，您可以选择
    // ||   使用环境变量来设置敏感凭据。
    //
    // 例如：
    // ```
    // sails_sockets__url=redis://admin:myc00lpAssw2D@bigsquid.redistogo.com:9562/0
    // ```
    //--------------------------------------------------------------------------

  },



  /**************************************************************************
  *                                                                         *
  * 设置生产日志级别。                                                       *
  *                                                                         *
  * (https://sailsjs.com/config/log)                                        *
  *                                                                         *
  **************************************************************************/
  log: {
    level: 'debug'
  },



  http: {

    /***************************************************************************
    *                                                                          *
    * 在生产环境中缓存静态资产的毫秒数。                                        *
    *（要包含在 "Cache-Control" 响应头中的 "max-age"）                         *
    *                                                                          *
    * 如果您使用像 Cloudflare 这样的工具缓存资产，您可能想要                     *
    * 大幅减少这个值以允许更灵活地清除缓存。                                    *
    *                                                                          *
    ***************************************************************************/
    cache: 365.25 * 24 * 60 * 60 * 1000, // 一年

    /***************************************************************************
    *                                                                          *
    * 代理设置                                                                 *
    *                                                                          *
    * 如果您的应用程序将部署在代理/负载均衡器后面 - 例如，                       *
    * 在像 Heroku 这样的 PaaS 上 - 则取消注释下面的 `trustProxy` 设置。         *
    * 这告诉 Sails/Express 如何解释 X-Forwarded 头。                           *
    *                                                                          *
    * 如果您使用安全 cookie（参见上面 `session` 下的 `cookies: secure` 设置）    *
    * 或者如果您的应用程序依赖于知道请求来自的原始 IP 地址，                     *
    * 这个设置尤其重要。                                                       *
    *                                                                          *
    * (https://sailsjs.com/config/http)                                        *
    *                                                                          *
    ***************************************************************************/
    // trustProxy: true,

  },



  /**************************************************************************
  *                                                                         *
  * 在端口 80 上启动服务器。                                                 *
  *（如果部署在代理后面，或者部署到像 Heroku 或 Deis 这样的 PaaS，             *
  * 您可能不需要在这里设置端口，因为它通常是                                   *
  * 自动处理的。如果您不确定，请咨询您的 PaaS/托管提供商！）                   *
  *                                                                         *
  **************************************************************************/
  // port: 80,



  /**************************************************************************
  *                                                                         *
  * 设置代理的 SSL/TLS 证书。                                                *
  *                                                                         *
  * 有关更多信息，请参见：                                                    *
  * https://sailsjs.com/config/ssl                                          *
  *                                                                         *
  **************************************************************************/
  // ssl: undefined,



  /**************************************************************************
  *                                                                         *
  * 生产环境覆盖其他配置设置。                                               *
  *                                                                         *
  * > 这里需要注意的是，这些值会覆盖其他配置文件中的值，                       *
  * > 包括当您在其他环境中运行此生产环境配置时。                              *
  * > 也就是说，即使您在开发环境中有一个自定义的本地配置，                     *
  * > 这些值也会覆盖那些值。                                                 *
  *                                                                         *
  * 更多信息，请参见：                                                       *
  * https://sailsjs.com/docs/concepts/configuration/environment-variables    *
  *                                                                         *
  **************************************************************************/
  // custom: {
  //   baseUrl: 'https://example.com',
  //   internalEmailAddress: 'support@example.com',
  //
  //   // 邮件发送配置：
  //   // https://sailsjs.com/docs/concepts/extending-sails/adapters/sails-disk
  //   mailgunDomain: 'mg.example.com',
  //   mailgunSecret: 'key-prod_fake_bd32301385130a0bafe030c',
  //   stripeSecret: 'sk_prod__fake_Nfgh82401348jaDa3lkZ0d9Hm',
  //   //--------------------------------------------------------------------------
  //   // /\   或者，如果您更喜欢，您可以在这里包含其他生产环境特定的配置
  //   // ||   设置，只要它们不需要任何敏感凭据即可。包含它们可能会使
  //   // ||   配置更容易理解。
  //   //
  //   // 例如：
  //   //--------------------------------------------------------------------------
  //   // bank: 'jpmorgan',
  //   // branch: '18 Broadway',
  //   // dataBackupEnabled: true,
  //   // defaultBranch: 'master',
  //   // minimumFraudScore: 0.9,
  // },

};
